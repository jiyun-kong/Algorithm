# 최단 경로 알고리즘 : 가장 짧은 경로를 찾는 알고리즘
# 다양한 문제 상황
# 1) 한 지점에서 다른 한 지점까지의 최단 경로
# 2) 한 지점에서 다른 모든 지점까지의 최단 경로
# 3) 모든 지점에서 다른 모든 지점까지의 최단 경로

# 각 지점은 그래프에서 노드로 표현
# 지점 간 연결된 도로는 그래프에서 간선으로 표현

# 다익스트라 최단 경로 알고리즘 개요
# 특정한 노드에서 출발하여 다른 모든 노드로 가는 최단 경로를 계산한다.
# 다익스트라 최단 경로 알고리즘은 음의 간선이 없을 때 정상적으로 동작한다. : 현실 세계의 도로 (간선)은 음의 간선으로 표현되지 않는다.
# 다익스트라 최단 경로 알고리즘은 그리디 알고리즘으로 분류된다. : 매 상황에서 가장 비용이 적은 노드를 선택해 임의의 과정을 반복한다.

# 알고리즘의 동작 과정
# 1) 출발 노드를 설정한다.
# 2) 최단 거리 테이블을 초기화한다.
# 3) 방문하지 않은 노드 중에서 최단 거리가 가장 짧은 노드를 선택한다.
# 4) 해당 노드를 거쳐 다른 노드로 가는 비용을 계산하여 최단 거리 테이블을 갱신한다.
# 5) 위 과정에서 3번과 4번을 반복한다.

# 다익스트라 알고리즘의 특징
# 그리디 알고리즘 : 매 상황에서 방문하지 않은 가장 비용이 적은 노드를 선택해 임의의 과정을 반복한다.
# 단계를 거치며 한 번 처리된 노드의 최단 거리는 고정되어 더이상 바뀌지 않는다. : 한 단계당 하나의 노드에 대한 최단거리를 확실히 찾는 것으로 이해할 수 있다.
# 다익스트라 알고리즘을 수행한 뒤에 테이블에 각 노드까지의 최단 거리 정보가 저장된다. : 완벽한 형태의 최단 경로를 구하려면 소스코드에 추가적인 기능을 더 넣어야 한다.
